#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "structs.glsl"

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, scalar) buffer VertexBuffer
{
    Vertex vertices[];
};

layout(binding = 1, scalar) buffer SkeletonVertexBuffer
{
    SkeletonVertex skeletonVertices[];
};

layout(binding = 2) uniform BonesBuffer
{
    mat4 bones[256];
};

void main()
{
    SkeletonVertex skeletonVertex = skeletonVertices[gl_GlobalInvocationID.x];

    mat4 transform = mat4(0);

    for(int i = 0; i < skeletonVertex.numberBones[0]; i++)
    {
        transform += bones[skeletonVertex.boneNumbers[i]] * skeletonVertex.weights[i];
    }

    vec4 position = transform * vec4(skeletonVertex.position.xyz, 1.f);
    vec4 normal = transform * vec4(skeletonVertex.normal.xyz, 0.f);

    vertices[gl_GlobalInvocationID.x].position = vec4(position.xyz/position.w,0.f);
    vertices[gl_GlobalInvocationID.x].normal = vec4(normal.xyz,0.f);   
}